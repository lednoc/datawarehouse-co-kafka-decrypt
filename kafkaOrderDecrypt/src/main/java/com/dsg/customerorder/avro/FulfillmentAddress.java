/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.dsg.customerorder.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class FulfillmentAddress extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7772715136567361512L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FulfillmentAddress\",\"namespace\":\"com.dsg.customerorder.avro\",\"fields\":[{\"name\":\"address1\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"address2\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"address3\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"city\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"state\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"postalCode\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"country\",\"type\":[\"null\",\"string\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<FulfillmentAddress> ENCODER =
      new BinaryMessageEncoder<FulfillmentAddress>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<FulfillmentAddress> DECODER =
      new BinaryMessageDecoder<FulfillmentAddress>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<FulfillmentAddress> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<FulfillmentAddress> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<FulfillmentAddress> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<FulfillmentAddress>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this FulfillmentAddress to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a FulfillmentAddress from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a FulfillmentAddress instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static FulfillmentAddress fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence address1;
   private java.lang.CharSequence address2;
   private java.lang.CharSequence address3;
   private java.lang.CharSequence city;
   private java.lang.CharSequence state;
   private java.lang.CharSequence postalCode;
   private java.lang.CharSequence country;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public FulfillmentAddress() {}

  /**
   * All-args constructor.
   * @param address1 The new value for address1
   * @param address2 The new value for address2
   * @param address3 The new value for address3
   * @param city The new value for city
   * @param state The new value for state
   * @param postalCode The new value for postalCode
   * @param country The new value for country
   */
  public FulfillmentAddress(java.lang.CharSequence address1, java.lang.CharSequence address2, java.lang.CharSequence address3, java.lang.CharSequence city, java.lang.CharSequence state, java.lang.CharSequence postalCode, java.lang.CharSequence country) {
    this.address1 = address1;
    this.address2 = address2;
    this.address3 = address3;
    this.city = city;
    this.state = state;
    this.postalCode = postalCode;
    this.country = country;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return address1;
    case 1: return address2;
    case 2: return address3;
    case 3: return city;
    case 4: return state;
    case 5: return postalCode;
    case 6: return country;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: address1 = (java.lang.CharSequence)value$; break;
    case 1: address2 = (java.lang.CharSequence)value$; break;
    case 2: address3 = (java.lang.CharSequence)value$; break;
    case 3: city = (java.lang.CharSequence)value$; break;
    case 4: state = (java.lang.CharSequence)value$; break;
    case 5: postalCode = (java.lang.CharSequence)value$; break;
    case 6: country = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'address1' field.
   * @return The value of the 'address1' field.
   */
  public java.lang.CharSequence getAddress1() {
    return address1;
  }


  /**
   * Sets the value of the 'address1' field.
   * @param value the value to set.
   */
  public void setAddress1(java.lang.CharSequence value) {
    this.address1 = value;
  }

  /**
   * Gets the value of the 'address2' field.
   * @return The value of the 'address2' field.
   */
  public java.lang.CharSequence getAddress2() {
    return address2;
  }


  /**
   * Sets the value of the 'address2' field.
   * @param value the value to set.
   */
  public void setAddress2(java.lang.CharSequence value) {
    this.address2 = value;
  }

  /**
   * Gets the value of the 'address3' field.
   * @return The value of the 'address3' field.
   */
  public java.lang.CharSequence getAddress3() {
    return address3;
  }


  /**
   * Sets the value of the 'address3' field.
   * @param value the value to set.
   */
  public void setAddress3(java.lang.CharSequence value) {
    this.address3 = value;
  }

  /**
   * Gets the value of the 'city' field.
   * @return The value of the 'city' field.
   */
  public java.lang.CharSequence getCity() {
    return city;
  }


  /**
   * Sets the value of the 'city' field.
   * @param value the value to set.
   */
  public void setCity(java.lang.CharSequence value) {
    this.city = value;
  }

  /**
   * Gets the value of the 'state' field.
   * @return The value of the 'state' field.
   */
  public java.lang.CharSequence getState() {
    return state;
  }


  /**
   * Sets the value of the 'state' field.
   * @param value the value to set.
   */
  public void setState(java.lang.CharSequence value) {
    this.state = value;
  }

  /**
   * Gets the value of the 'postalCode' field.
   * @return The value of the 'postalCode' field.
   */
  public java.lang.CharSequence getPostalCode() {
    return postalCode;
  }


  /**
   * Sets the value of the 'postalCode' field.
   * @param value the value to set.
   */
  public void setPostalCode(java.lang.CharSequence value) {
    this.postalCode = value;
  }

  /**
   * Gets the value of the 'country' field.
   * @return The value of the 'country' field.
   */
  public java.lang.CharSequence getCountry() {
    return country;
  }


  /**
   * Sets the value of the 'country' field.
   * @param value the value to set.
   */
  public void setCountry(java.lang.CharSequence value) {
    this.country = value;
  }

  /**
   * Creates a new FulfillmentAddress RecordBuilder.
   * @return A new FulfillmentAddress RecordBuilder
   */
  public static com.dsg.customerorder.avro.FulfillmentAddress.Builder newBuilder() {
    return new com.dsg.customerorder.avro.FulfillmentAddress.Builder();
  }

  /**
   * Creates a new FulfillmentAddress RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new FulfillmentAddress RecordBuilder
   */
  public static com.dsg.customerorder.avro.FulfillmentAddress.Builder newBuilder(com.dsg.customerorder.avro.FulfillmentAddress.Builder other) {
    if (other == null) {
      return new com.dsg.customerorder.avro.FulfillmentAddress.Builder();
    } else {
      return new com.dsg.customerorder.avro.FulfillmentAddress.Builder(other);
    }
  }

  /**
   * Creates a new FulfillmentAddress RecordBuilder by copying an existing FulfillmentAddress instance.
   * @param other The existing instance to copy.
   * @return A new FulfillmentAddress RecordBuilder
   */
  public static com.dsg.customerorder.avro.FulfillmentAddress.Builder newBuilder(com.dsg.customerorder.avro.FulfillmentAddress other) {
    if (other == null) {
      return new com.dsg.customerorder.avro.FulfillmentAddress.Builder();
    } else {
      return new com.dsg.customerorder.avro.FulfillmentAddress.Builder(other);
    }
  }

  /**
   * RecordBuilder for FulfillmentAddress instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FulfillmentAddress>
    implements org.apache.avro.data.RecordBuilder<FulfillmentAddress> {

    private java.lang.CharSequence address1;
    private java.lang.CharSequence address2;
    private java.lang.CharSequence address3;
    private java.lang.CharSequence city;
    private java.lang.CharSequence state;
    private java.lang.CharSequence postalCode;
    private java.lang.CharSequence country;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.dsg.customerorder.avro.FulfillmentAddress.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.address1)) {
        this.address1 = data().deepCopy(fields()[0].schema(), other.address1);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.address2)) {
        this.address2 = data().deepCopy(fields()[1].schema(), other.address2);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.address3)) {
        this.address3 = data().deepCopy(fields()[2].schema(), other.address3);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.city)) {
        this.city = data().deepCopy(fields()[3].schema(), other.city);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.state)) {
        this.state = data().deepCopy(fields()[4].schema(), other.state);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.postalCode)) {
        this.postalCode = data().deepCopy(fields()[5].schema(), other.postalCode);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.country)) {
        this.country = data().deepCopy(fields()[6].schema(), other.country);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing FulfillmentAddress instance
     * @param other The existing instance to copy.
     */
    private Builder(com.dsg.customerorder.avro.FulfillmentAddress other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.address1)) {
        this.address1 = data().deepCopy(fields()[0].schema(), other.address1);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.address2)) {
        this.address2 = data().deepCopy(fields()[1].schema(), other.address2);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.address3)) {
        this.address3 = data().deepCopy(fields()[2].schema(), other.address3);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.city)) {
        this.city = data().deepCopy(fields()[3].schema(), other.city);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.state)) {
        this.state = data().deepCopy(fields()[4].schema(), other.state);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.postalCode)) {
        this.postalCode = data().deepCopy(fields()[5].schema(), other.postalCode);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.country)) {
        this.country = data().deepCopy(fields()[6].schema(), other.country);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'address1' field.
      * @return The value.
      */
    public java.lang.CharSequence getAddress1() {
      return address1;
    }


    /**
      * Sets the value of the 'address1' field.
      * @param value The value of 'address1'.
      * @return This builder.
      */
    public com.dsg.customerorder.avro.FulfillmentAddress.Builder setAddress1(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.address1 = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'address1' field has been set.
      * @return True if the 'address1' field has been set, false otherwise.
      */
    public boolean hasAddress1() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'address1' field.
      * @return This builder.
      */
    public com.dsg.customerorder.avro.FulfillmentAddress.Builder clearAddress1() {
      address1 = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'address2' field.
      * @return The value.
      */
    public java.lang.CharSequence getAddress2() {
      return address2;
    }


    /**
      * Sets the value of the 'address2' field.
      * @param value The value of 'address2'.
      * @return This builder.
      */
    public com.dsg.customerorder.avro.FulfillmentAddress.Builder setAddress2(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.address2 = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'address2' field has been set.
      * @return True if the 'address2' field has been set, false otherwise.
      */
    public boolean hasAddress2() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'address2' field.
      * @return This builder.
      */
    public com.dsg.customerorder.avro.FulfillmentAddress.Builder clearAddress2() {
      address2 = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'address3' field.
      * @return The value.
      */
    public java.lang.CharSequence getAddress3() {
      return address3;
    }


    /**
      * Sets the value of the 'address3' field.
      * @param value The value of 'address3'.
      * @return This builder.
      */
    public com.dsg.customerorder.avro.FulfillmentAddress.Builder setAddress3(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.address3 = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'address3' field has been set.
      * @return True if the 'address3' field has been set, false otherwise.
      */
    public boolean hasAddress3() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'address3' field.
      * @return This builder.
      */
    public com.dsg.customerorder.avro.FulfillmentAddress.Builder clearAddress3() {
      address3 = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'city' field.
      * @return The value.
      */
    public java.lang.CharSequence getCity() {
      return city;
    }


    /**
      * Sets the value of the 'city' field.
      * @param value The value of 'city'.
      * @return This builder.
      */
    public com.dsg.customerorder.avro.FulfillmentAddress.Builder setCity(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.city = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'city' field has been set.
      * @return True if the 'city' field has been set, false otherwise.
      */
    public boolean hasCity() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'city' field.
      * @return This builder.
      */
    public com.dsg.customerorder.avro.FulfillmentAddress.Builder clearCity() {
      city = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'state' field.
      * @return The value.
      */
    public java.lang.CharSequence getState() {
      return state;
    }


    /**
      * Sets the value of the 'state' field.
      * @param value The value of 'state'.
      * @return This builder.
      */
    public com.dsg.customerorder.avro.FulfillmentAddress.Builder setState(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.state = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'state' field has been set.
      * @return True if the 'state' field has been set, false otherwise.
      */
    public boolean hasState() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'state' field.
      * @return This builder.
      */
    public com.dsg.customerorder.avro.FulfillmentAddress.Builder clearState() {
      state = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'postalCode' field.
      * @return The value.
      */
    public java.lang.CharSequence getPostalCode() {
      return postalCode;
    }


    /**
      * Sets the value of the 'postalCode' field.
      * @param value The value of 'postalCode'.
      * @return This builder.
      */
    public com.dsg.customerorder.avro.FulfillmentAddress.Builder setPostalCode(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.postalCode = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'postalCode' field has been set.
      * @return True if the 'postalCode' field has been set, false otherwise.
      */
    public boolean hasPostalCode() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'postalCode' field.
      * @return This builder.
      */
    public com.dsg.customerorder.avro.FulfillmentAddress.Builder clearPostalCode() {
      postalCode = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'country' field.
      * @return The value.
      */
    public java.lang.CharSequence getCountry() {
      return country;
    }


    /**
      * Sets the value of the 'country' field.
      * @param value The value of 'country'.
      * @return This builder.
      */
    public com.dsg.customerorder.avro.FulfillmentAddress.Builder setCountry(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.country = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'country' field has been set.
      * @return True if the 'country' field has been set, false otherwise.
      */
    public boolean hasCountry() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'country' field.
      * @return This builder.
      */
    public com.dsg.customerorder.avro.FulfillmentAddress.Builder clearCountry() {
      country = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public FulfillmentAddress build() {
      try {
        FulfillmentAddress record = new FulfillmentAddress();
        record.address1 = fieldSetFlags()[0] ? this.address1 : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.address2 = fieldSetFlags()[1] ? this.address2 : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.address3 = fieldSetFlags()[2] ? this.address3 : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.city = fieldSetFlags()[3] ? this.city : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.state = fieldSetFlags()[4] ? this.state : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.postalCode = fieldSetFlags()[5] ? this.postalCode : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.country = fieldSetFlags()[6] ? this.country : (java.lang.CharSequence) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<FulfillmentAddress>
    WRITER$ = (org.apache.avro.io.DatumWriter<FulfillmentAddress>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<FulfillmentAddress>
    READER$ = (org.apache.avro.io.DatumReader<FulfillmentAddress>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.address1 == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.address1);
    }

    if (this.address2 == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.address2);
    }

    if (this.address3 == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.address3);
    }

    if (this.city == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.city);
    }

    if (this.state == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.state);
    }

    if (this.postalCode == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.postalCode);
    }

    if (this.country == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.country);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.address1 = null;
      } else {
        this.address1 = in.readString(this.address1 instanceof Utf8 ? (Utf8)this.address1 : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.address2 = null;
      } else {
        this.address2 = in.readString(this.address2 instanceof Utf8 ? (Utf8)this.address2 : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.address3 = null;
      } else {
        this.address3 = in.readString(this.address3 instanceof Utf8 ? (Utf8)this.address3 : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.city = null;
      } else {
        this.city = in.readString(this.city instanceof Utf8 ? (Utf8)this.city : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.state = null;
      } else {
        this.state = in.readString(this.state instanceof Utf8 ? (Utf8)this.state : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.postalCode = null;
      } else {
        this.postalCode = in.readString(this.postalCode instanceof Utf8 ? (Utf8)this.postalCode : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.country = null;
      } else {
        this.country = in.readString(this.country instanceof Utf8 ? (Utf8)this.country : null);
      }

    } else {
      for (int i = 0; i < 7; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.address1 = null;
          } else {
            this.address1 = in.readString(this.address1 instanceof Utf8 ? (Utf8)this.address1 : null);
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.address2 = null;
          } else {
            this.address2 = in.readString(this.address2 instanceof Utf8 ? (Utf8)this.address2 : null);
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.address3 = null;
          } else {
            this.address3 = in.readString(this.address3 instanceof Utf8 ? (Utf8)this.address3 : null);
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.city = null;
          } else {
            this.city = in.readString(this.city instanceof Utf8 ? (Utf8)this.city : null);
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.state = null;
          } else {
            this.state = in.readString(this.state instanceof Utf8 ? (Utf8)this.state : null);
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.postalCode = null;
          } else {
            this.postalCode = in.readString(this.postalCode instanceof Utf8 ? (Utf8)this.postalCode : null);
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.country = null;
          } else {
            this.country = in.readString(this.country instanceof Utf8 ? (Utf8)this.country : null);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










