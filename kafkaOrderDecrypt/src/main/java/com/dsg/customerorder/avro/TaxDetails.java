/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.dsg.customerorder.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class TaxDetails extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3364784131370604669L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TaxDetails\",\"namespace\":\"com.dsg.customerorder.avro\",\"fields\":[{\"name\":\"taxProductCode\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"estimatedShipTax\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"actualShipTax\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"estimatedUnitTax\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"actualUnitTax\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"adminOriginId\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"physicalOriginId\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"adminDestinationId\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"destinationId\",\"type\":[\"null\",\"string\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TaxDetails> ENCODER =
      new BinaryMessageEncoder<TaxDetails>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TaxDetails> DECODER =
      new BinaryMessageDecoder<TaxDetails>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<TaxDetails> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<TaxDetails> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<TaxDetails> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TaxDetails>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this TaxDetails to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a TaxDetails from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a TaxDetails instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static TaxDetails fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence taxProductCode;
   private java.lang.CharSequence estimatedShipTax;
   private java.lang.CharSequence actualShipTax;
   private java.lang.CharSequence estimatedUnitTax;
   private java.lang.CharSequence actualUnitTax;
   private java.lang.CharSequence adminOriginId;
   private java.lang.CharSequence physicalOriginId;
   private java.lang.CharSequence adminDestinationId;
   private java.lang.CharSequence destinationId;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TaxDetails() {}

  /**
   * All-args constructor.
   * @param taxProductCode The new value for taxProductCode
   * @param estimatedShipTax The new value for estimatedShipTax
   * @param actualShipTax The new value for actualShipTax
   * @param estimatedUnitTax The new value for estimatedUnitTax
   * @param actualUnitTax The new value for actualUnitTax
   * @param adminOriginId The new value for adminOriginId
   * @param physicalOriginId The new value for physicalOriginId
   * @param adminDestinationId The new value for adminDestinationId
   * @param destinationId The new value for destinationId
   */
  public TaxDetails(java.lang.CharSequence taxProductCode, java.lang.CharSequence estimatedShipTax, java.lang.CharSequence actualShipTax, java.lang.CharSequence estimatedUnitTax, java.lang.CharSequence actualUnitTax, java.lang.CharSequence adminOriginId, java.lang.CharSequence physicalOriginId, java.lang.CharSequence adminDestinationId, java.lang.CharSequence destinationId) {
    this.taxProductCode = taxProductCode;
    this.estimatedShipTax = estimatedShipTax;
    this.actualShipTax = actualShipTax;
    this.estimatedUnitTax = estimatedUnitTax;
    this.actualUnitTax = actualUnitTax;
    this.adminOriginId = adminOriginId;
    this.physicalOriginId = physicalOriginId;
    this.adminDestinationId = adminDestinationId;
    this.destinationId = destinationId;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return taxProductCode;
    case 1: return estimatedShipTax;
    case 2: return actualShipTax;
    case 3: return estimatedUnitTax;
    case 4: return actualUnitTax;
    case 5: return adminOriginId;
    case 6: return physicalOriginId;
    case 7: return adminDestinationId;
    case 8: return destinationId;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: taxProductCode = (java.lang.CharSequence)value$; break;
    case 1: estimatedShipTax = (java.lang.CharSequence)value$; break;
    case 2: actualShipTax = (java.lang.CharSequence)value$; break;
    case 3: estimatedUnitTax = (java.lang.CharSequence)value$; break;
    case 4: actualUnitTax = (java.lang.CharSequence)value$; break;
    case 5: adminOriginId = (java.lang.CharSequence)value$; break;
    case 6: physicalOriginId = (java.lang.CharSequence)value$; break;
    case 7: adminDestinationId = (java.lang.CharSequence)value$; break;
    case 8: destinationId = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'taxProductCode' field.
   * @return The value of the 'taxProductCode' field.
   */
  public java.lang.CharSequence getTaxProductCode() {
    return taxProductCode;
  }


  /**
   * Sets the value of the 'taxProductCode' field.
   * @param value the value to set.
   */
  public void setTaxProductCode(java.lang.CharSequence value) {
    this.taxProductCode = value;
  }

  /**
   * Gets the value of the 'estimatedShipTax' field.
   * @return The value of the 'estimatedShipTax' field.
   */
  public java.lang.CharSequence getEstimatedShipTax() {
    return estimatedShipTax;
  }


  /**
   * Sets the value of the 'estimatedShipTax' field.
   * @param value the value to set.
   */
  public void setEstimatedShipTax(java.lang.CharSequence value) {
    this.estimatedShipTax = value;
  }

  /**
   * Gets the value of the 'actualShipTax' field.
   * @return The value of the 'actualShipTax' field.
   */
  public java.lang.CharSequence getActualShipTax() {
    return actualShipTax;
  }


  /**
   * Sets the value of the 'actualShipTax' field.
   * @param value the value to set.
   */
  public void setActualShipTax(java.lang.CharSequence value) {
    this.actualShipTax = value;
  }

  /**
   * Gets the value of the 'estimatedUnitTax' field.
   * @return The value of the 'estimatedUnitTax' field.
   */
  public java.lang.CharSequence getEstimatedUnitTax() {
    return estimatedUnitTax;
  }


  /**
   * Sets the value of the 'estimatedUnitTax' field.
   * @param value the value to set.
   */
  public void setEstimatedUnitTax(java.lang.CharSequence value) {
    this.estimatedUnitTax = value;
  }

  /**
   * Gets the value of the 'actualUnitTax' field.
   * @return The value of the 'actualUnitTax' field.
   */
  public java.lang.CharSequence getActualUnitTax() {
    return actualUnitTax;
  }


  /**
   * Sets the value of the 'actualUnitTax' field.
   * @param value the value to set.
   */
  public void setActualUnitTax(java.lang.CharSequence value) {
    this.actualUnitTax = value;
  }

  /**
   * Gets the value of the 'adminOriginId' field.
   * @return The value of the 'adminOriginId' field.
   */
  public java.lang.CharSequence getAdminOriginId() {
    return adminOriginId;
  }


  /**
   * Sets the value of the 'adminOriginId' field.
   * @param value the value to set.
   */
  public void setAdminOriginId(java.lang.CharSequence value) {
    this.adminOriginId = value;
  }

  /**
   * Gets the value of the 'physicalOriginId' field.
   * @return The value of the 'physicalOriginId' field.
   */
  public java.lang.CharSequence getPhysicalOriginId() {
    return physicalOriginId;
  }


  /**
   * Sets the value of the 'physicalOriginId' field.
   * @param value the value to set.
   */
  public void setPhysicalOriginId(java.lang.CharSequence value) {
    this.physicalOriginId = value;
  }

  /**
   * Gets the value of the 'adminDestinationId' field.
   * @return The value of the 'adminDestinationId' field.
   */
  public java.lang.CharSequence getAdminDestinationId() {
    return adminDestinationId;
  }


  /**
   * Sets the value of the 'adminDestinationId' field.
   * @param value the value to set.
   */
  public void setAdminDestinationId(java.lang.CharSequence value) {
    this.adminDestinationId = value;
  }

  /**
   * Gets the value of the 'destinationId' field.
   * @return The value of the 'destinationId' field.
   */
  public java.lang.CharSequence getDestinationId() {
    return destinationId;
  }


  /**
   * Sets the value of the 'destinationId' field.
   * @param value the value to set.
   */
  public void setDestinationId(java.lang.CharSequence value) {
    this.destinationId = value;
  }

  /**
   * Creates a new TaxDetails RecordBuilder.
   * @return A new TaxDetails RecordBuilder
   */
  public static com.dsg.customerorder.avro.TaxDetails.Builder newBuilder() {
    return new com.dsg.customerorder.avro.TaxDetails.Builder();
  }

  /**
   * Creates a new TaxDetails RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TaxDetails RecordBuilder
   */
  public static com.dsg.customerorder.avro.TaxDetails.Builder newBuilder(com.dsg.customerorder.avro.TaxDetails.Builder other) {
    if (other == null) {
      return new com.dsg.customerorder.avro.TaxDetails.Builder();
    } else {
      return new com.dsg.customerorder.avro.TaxDetails.Builder(other);
    }
  }

  /**
   * Creates a new TaxDetails RecordBuilder by copying an existing TaxDetails instance.
   * @param other The existing instance to copy.
   * @return A new TaxDetails RecordBuilder
   */
  public static com.dsg.customerorder.avro.TaxDetails.Builder newBuilder(com.dsg.customerorder.avro.TaxDetails other) {
    if (other == null) {
      return new com.dsg.customerorder.avro.TaxDetails.Builder();
    } else {
      return new com.dsg.customerorder.avro.TaxDetails.Builder(other);
    }
  }

  /**
   * RecordBuilder for TaxDetails instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TaxDetails>
    implements org.apache.avro.data.RecordBuilder<TaxDetails> {

    private java.lang.CharSequence taxProductCode;
    private java.lang.CharSequence estimatedShipTax;
    private java.lang.CharSequence actualShipTax;
    private java.lang.CharSequence estimatedUnitTax;
    private java.lang.CharSequence actualUnitTax;
    private java.lang.CharSequence adminOriginId;
    private java.lang.CharSequence physicalOriginId;
    private java.lang.CharSequence adminDestinationId;
    private java.lang.CharSequence destinationId;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.dsg.customerorder.avro.TaxDetails.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.taxProductCode)) {
        this.taxProductCode = data().deepCopy(fields()[0].schema(), other.taxProductCode);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.estimatedShipTax)) {
        this.estimatedShipTax = data().deepCopy(fields()[1].schema(), other.estimatedShipTax);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.actualShipTax)) {
        this.actualShipTax = data().deepCopy(fields()[2].schema(), other.actualShipTax);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.estimatedUnitTax)) {
        this.estimatedUnitTax = data().deepCopy(fields()[3].schema(), other.estimatedUnitTax);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.actualUnitTax)) {
        this.actualUnitTax = data().deepCopy(fields()[4].schema(), other.actualUnitTax);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.adminOriginId)) {
        this.adminOriginId = data().deepCopy(fields()[5].schema(), other.adminOriginId);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.physicalOriginId)) {
        this.physicalOriginId = data().deepCopy(fields()[6].schema(), other.physicalOriginId);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.adminDestinationId)) {
        this.adminDestinationId = data().deepCopy(fields()[7].schema(), other.adminDestinationId);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.destinationId)) {
        this.destinationId = data().deepCopy(fields()[8].schema(), other.destinationId);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
    }

    /**
     * Creates a Builder by copying an existing TaxDetails instance
     * @param other The existing instance to copy.
     */
    private Builder(com.dsg.customerorder.avro.TaxDetails other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.taxProductCode)) {
        this.taxProductCode = data().deepCopy(fields()[0].schema(), other.taxProductCode);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.estimatedShipTax)) {
        this.estimatedShipTax = data().deepCopy(fields()[1].schema(), other.estimatedShipTax);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.actualShipTax)) {
        this.actualShipTax = data().deepCopy(fields()[2].schema(), other.actualShipTax);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.estimatedUnitTax)) {
        this.estimatedUnitTax = data().deepCopy(fields()[3].schema(), other.estimatedUnitTax);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.actualUnitTax)) {
        this.actualUnitTax = data().deepCopy(fields()[4].schema(), other.actualUnitTax);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.adminOriginId)) {
        this.adminOriginId = data().deepCopy(fields()[5].schema(), other.adminOriginId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.physicalOriginId)) {
        this.physicalOriginId = data().deepCopy(fields()[6].schema(), other.physicalOriginId);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.adminDestinationId)) {
        this.adminDestinationId = data().deepCopy(fields()[7].schema(), other.adminDestinationId);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.destinationId)) {
        this.destinationId = data().deepCopy(fields()[8].schema(), other.destinationId);
        fieldSetFlags()[8] = true;
      }
    }

    /**
      * Gets the value of the 'taxProductCode' field.
      * @return The value.
      */
    public java.lang.CharSequence getTaxProductCode() {
      return taxProductCode;
    }


    /**
      * Sets the value of the 'taxProductCode' field.
      * @param value The value of 'taxProductCode'.
      * @return This builder.
      */
    public com.dsg.customerorder.avro.TaxDetails.Builder setTaxProductCode(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.taxProductCode = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'taxProductCode' field has been set.
      * @return True if the 'taxProductCode' field has been set, false otherwise.
      */
    public boolean hasTaxProductCode() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'taxProductCode' field.
      * @return This builder.
      */
    public com.dsg.customerorder.avro.TaxDetails.Builder clearTaxProductCode() {
      taxProductCode = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'estimatedShipTax' field.
      * @return The value.
      */
    public java.lang.CharSequence getEstimatedShipTax() {
      return estimatedShipTax;
    }


    /**
      * Sets the value of the 'estimatedShipTax' field.
      * @param value The value of 'estimatedShipTax'.
      * @return This builder.
      */
    public com.dsg.customerorder.avro.TaxDetails.Builder setEstimatedShipTax(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.estimatedShipTax = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'estimatedShipTax' field has been set.
      * @return True if the 'estimatedShipTax' field has been set, false otherwise.
      */
    public boolean hasEstimatedShipTax() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'estimatedShipTax' field.
      * @return This builder.
      */
    public com.dsg.customerorder.avro.TaxDetails.Builder clearEstimatedShipTax() {
      estimatedShipTax = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'actualShipTax' field.
      * @return The value.
      */
    public java.lang.CharSequence getActualShipTax() {
      return actualShipTax;
    }


    /**
      * Sets the value of the 'actualShipTax' field.
      * @param value The value of 'actualShipTax'.
      * @return This builder.
      */
    public com.dsg.customerorder.avro.TaxDetails.Builder setActualShipTax(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.actualShipTax = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'actualShipTax' field has been set.
      * @return True if the 'actualShipTax' field has been set, false otherwise.
      */
    public boolean hasActualShipTax() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'actualShipTax' field.
      * @return This builder.
      */
    public com.dsg.customerorder.avro.TaxDetails.Builder clearActualShipTax() {
      actualShipTax = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'estimatedUnitTax' field.
      * @return The value.
      */
    public java.lang.CharSequence getEstimatedUnitTax() {
      return estimatedUnitTax;
    }


    /**
      * Sets the value of the 'estimatedUnitTax' field.
      * @param value The value of 'estimatedUnitTax'.
      * @return This builder.
      */
    public com.dsg.customerorder.avro.TaxDetails.Builder setEstimatedUnitTax(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.estimatedUnitTax = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'estimatedUnitTax' field has been set.
      * @return True if the 'estimatedUnitTax' field has been set, false otherwise.
      */
    public boolean hasEstimatedUnitTax() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'estimatedUnitTax' field.
      * @return This builder.
      */
    public com.dsg.customerorder.avro.TaxDetails.Builder clearEstimatedUnitTax() {
      estimatedUnitTax = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'actualUnitTax' field.
      * @return The value.
      */
    public java.lang.CharSequence getActualUnitTax() {
      return actualUnitTax;
    }


    /**
      * Sets the value of the 'actualUnitTax' field.
      * @param value The value of 'actualUnitTax'.
      * @return This builder.
      */
    public com.dsg.customerorder.avro.TaxDetails.Builder setActualUnitTax(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.actualUnitTax = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'actualUnitTax' field has been set.
      * @return True if the 'actualUnitTax' field has been set, false otherwise.
      */
    public boolean hasActualUnitTax() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'actualUnitTax' field.
      * @return This builder.
      */
    public com.dsg.customerorder.avro.TaxDetails.Builder clearActualUnitTax() {
      actualUnitTax = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'adminOriginId' field.
      * @return The value.
      */
    public java.lang.CharSequence getAdminOriginId() {
      return adminOriginId;
    }


    /**
      * Sets the value of the 'adminOriginId' field.
      * @param value The value of 'adminOriginId'.
      * @return This builder.
      */
    public com.dsg.customerorder.avro.TaxDetails.Builder setAdminOriginId(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.adminOriginId = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'adminOriginId' field has been set.
      * @return True if the 'adminOriginId' field has been set, false otherwise.
      */
    public boolean hasAdminOriginId() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'adminOriginId' field.
      * @return This builder.
      */
    public com.dsg.customerorder.avro.TaxDetails.Builder clearAdminOriginId() {
      adminOriginId = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'physicalOriginId' field.
      * @return The value.
      */
    public java.lang.CharSequence getPhysicalOriginId() {
      return physicalOriginId;
    }


    /**
      * Sets the value of the 'physicalOriginId' field.
      * @param value The value of 'physicalOriginId'.
      * @return This builder.
      */
    public com.dsg.customerorder.avro.TaxDetails.Builder setPhysicalOriginId(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.physicalOriginId = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'physicalOriginId' field has been set.
      * @return True if the 'physicalOriginId' field has been set, false otherwise.
      */
    public boolean hasPhysicalOriginId() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'physicalOriginId' field.
      * @return This builder.
      */
    public com.dsg.customerorder.avro.TaxDetails.Builder clearPhysicalOriginId() {
      physicalOriginId = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'adminDestinationId' field.
      * @return The value.
      */
    public java.lang.CharSequence getAdminDestinationId() {
      return adminDestinationId;
    }


    /**
      * Sets the value of the 'adminDestinationId' field.
      * @param value The value of 'adminDestinationId'.
      * @return This builder.
      */
    public com.dsg.customerorder.avro.TaxDetails.Builder setAdminDestinationId(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.adminDestinationId = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'adminDestinationId' field has been set.
      * @return True if the 'adminDestinationId' field has been set, false otherwise.
      */
    public boolean hasAdminDestinationId() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'adminDestinationId' field.
      * @return This builder.
      */
    public com.dsg.customerorder.avro.TaxDetails.Builder clearAdminDestinationId() {
      adminDestinationId = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'destinationId' field.
      * @return The value.
      */
    public java.lang.CharSequence getDestinationId() {
      return destinationId;
    }


    /**
      * Sets the value of the 'destinationId' field.
      * @param value The value of 'destinationId'.
      * @return This builder.
      */
    public com.dsg.customerorder.avro.TaxDetails.Builder setDestinationId(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.destinationId = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'destinationId' field has been set.
      * @return True if the 'destinationId' field has been set, false otherwise.
      */
    public boolean hasDestinationId() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'destinationId' field.
      * @return This builder.
      */
    public com.dsg.customerorder.avro.TaxDetails.Builder clearDestinationId() {
      destinationId = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TaxDetails build() {
      try {
        TaxDetails record = new TaxDetails();
        record.taxProductCode = fieldSetFlags()[0] ? this.taxProductCode : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.estimatedShipTax = fieldSetFlags()[1] ? this.estimatedShipTax : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.actualShipTax = fieldSetFlags()[2] ? this.actualShipTax : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.estimatedUnitTax = fieldSetFlags()[3] ? this.estimatedUnitTax : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.actualUnitTax = fieldSetFlags()[4] ? this.actualUnitTax : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.adminOriginId = fieldSetFlags()[5] ? this.adminOriginId : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.physicalOriginId = fieldSetFlags()[6] ? this.physicalOriginId : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.adminDestinationId = fieldSetFlags()[7] ? this.adminDestinationId : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.destinationId = fieldSetFlags()[8] ? this.destinationId : (java.lang.CharSequence) defaultValue(fields()[8]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TaxDetails>
    WRITER$ = (org.apache.avro.io.DatumWriter<TaxDetails>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TaxDetails>
    READER$ = (org.apache.avro.io.DatumReader<TaxDetails>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.taxProductCode == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.taxProductCode);
    }

    if (this.estimatedShipTax == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.estimatedShipTax);
    }

    if (this.actualShipTax == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.actualShipTax);
    }

    if (this.estimatedUnitTax == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.estimatedUnitTax);
    }

    if (this.actualUnitTax == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.actualUnitTax);
    }

    if (this.adminOriginId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.adminOriginId);
    }

    if (this.physicalOriginId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.physicalOriginId);
    }

    if (this.adminDestinationId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.adminDestinationId);
    }

    if (this.destinationId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.destinationId);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.taxProductCode = null;
      } else {
        this.taxProductCode = in.readString(this.taxProductCode instanceof Utf8 ? (Utf8)this.taxProductCode : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.estimatedShipTax = null;
      } else {
        this.estimatedShipTax = in.readString(this.estimatedShipTax instanceof Utf8 ? (Utf8)this.estimatedShipTax : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.actualShipTax = null;
      } else {
        this.actualShipTax = in.readString(this.actualShipTax instanceof Utf8 ? (Utf8)this.actualShipTax : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.estimatedUnitTax = null;
      } else {
        this.estimatedUnitTax = in.readString(this.estimatedUnitTax instanceof Utf8 ? (Utf8)this.estimatedUnitTax : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.actualUnitTax = null;
      } else {
        this.actualUnitTax = in.readString(this.actualUnitTax instanceof Utf8 ? (Utf8)this.actualUnitTax : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.adminOriginId = null;
      } else {
        this.adminOriginId = in.readString(this.adminOriginId instanceof Utf8 ? (Utf8)this.adminOriginId : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.physicalOriginId = null;
      } else {
        this.physicalOriginId = in.readString(this.physicalOriginId instanceof Utf8 ? (Utf8)this.physicalOriginId : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.adminDestinationId = null;
      } else {
        this.adminDestinationId = in.readString(this.adminDestinationId instanceof Utf8 ? (Utf8)this.adminDestinationId : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.destinationId = null;
      } else {
        this.destinationId = in.readString(this.destinationId instanceof Utf8 ? (Utf8)this.destinationId : null);
      }

    } else {
      for (int i = 0; i < 9; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.taxProductCode = null;
          } else {
            this.taxProductCode = in.readString(this.taxProductCode instanceof Utf8 ? (Utf8)this.taxProductCode : null);
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.estimatedShipTax = null;
          } else {
            this.estimatedShipTax = in.readString(this.estimatedShipTax instanceof Utf8 ? (Utf8)this.estimatedShipTax : null);
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.actualShipTax = null;
          } else {
            this.actualShipTax = in.readString(this.actualShipTax instanceof Utf8 ? (Utf8)this.actualShipTax : null);
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.estimatedUnitTax = null;
          } else {
            this.estimatedUnitTax = in.readString(this.estimatedUnitTax instanceof Utf8 ? (Utf8)this.estimatedUnitTax : null);
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.actualUnitTax = null;
          } else {
            this.actualUnitTax = in.readString(this.actualUnitTax instanceof Utf8 ? (Utf8)this.actualUnitTax : null);
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.adminOriginId = null;
          } else {
            this.adminOriginId = in.readString(this.adminOriginId instanceof Utf8 ? (Utf8)this.adminOriginId : null);
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.physicalOriginId = null;
          } else {
            this.physicalOriginId = in.readString(this.physicalOriginId instanceof Utf8 ? (Utf8)this.physicalOriginId : null);
          }
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.adminDestinationId = null;
          } else {
            this.adminDestinationId = in.readString(this.adminDestinationId instanceof Utf8 ? (Utf8)this.adminDestinationId : null);
          }
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.destinationId = null;
          } else {
            this.destinationId = in.readString(this.destinationId instanceof Utf8 ? (Utf8)this.destinationId : null);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










